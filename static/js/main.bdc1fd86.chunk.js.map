{"version":3,"sources":["getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","on","location","reload","console","log","provider","providers","HttpProvider","App","props","state","winningProposal","workflowStatus","accounts","contract","proposal0","undefined","proposal1","proposal2","proposal3","proposal4","owned","showProposals","componentDidMount","eth","getAccounts","net","getId","networkId","deployedNetwork","VotingContract","networks","instance","Contract","abi","address","methods","owner","call","setState","runExample","alert","error","getWorkflowStatus","response2","handleInputChange","e","target","name","value","handleSubmit","username","addVoter","send","from","handleSubmitStartProposalsRegistering","startProposalsRegistering","objet","valueEventPreviousStatus","events","WorkflowStatusChange","returnValues","previousStatus","valueEventNewStatus","newStatus","handleSubmitProposal","proposal","addProposal","handleSubmitEndProposalsRegistering","endProposalsRegistering","response3","handleSubmitProposalId","proposalId","setVote","parseInt","handleSubmitStartVotingSession","startVotingSession","response4","handleSubmitEndVotingSession","endVotingSession","response5","handleSubmitTallyVotes","tallyVotes","response6","getWinningProposalId","response","handleSubmitGetWinningId","handleSubmitShowproposals","getOneProposal","handleChange","bind","handleSubmitBis","event","this","preventDefault","className","onSubmit","type","id","onChange","required","onClick","htmlFor","Component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bdc1fd86.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n\n          window.ethereum.on('accountsChanged',function(){\n            window.location.reload();\n          });\n\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\nimport VotingContract from \"./contracts/Voting.json\";\nimport getWeb3 from \"./getWeb3\";\nimport \"./App.css\";\n\n\nclass App extends Component {\n  state = { winningProposal: null, workflowStatus: null, web3: null, accounts: null, contract: null, \n    proposal0: undefined, proposal1: undefined, proposal2: undefined, proposal3: undefined, proposal4: undefined, owned:false, showProposals: false};\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = VotingContract.networks[networkId];\n      const instance = new web3.eth.Contract(\n        VotingContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n \n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      \n      const owner = await instance.methods.owner().call();\n      let owned= accounts[0]==owner;\n\n\n      this.setState({ web3, accounts, contract: instance, owned }, this.runExample);\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n\n\n  runExample = async () => {\n    const { accounts, contract } = this.state;\n    \n    // const response = await contract.methods.getWinningProposalId().call();\n    // this.setState({ winningProposal: response });\n\n    const response2 = await contract.methods.getWorkflowStatus().call();\n    this.setState({ workflowStatus: response2 });\n  }; \n\n  handleInputChange = e => {\n    this.setState({[e.target.name]: e.target.value,});\n  };\n\n  handleSubmit = async (e) => {\n    const { accounts, contract, username } = this.state;\n    await contract.methods.addVoter(username).send({ from: accounts[0] });\n  }\n\n  handleSubmitStartProposalsRegistering = async () => {\n    const { accounts, contract } = this.state;\n    const objet = await contract.methods.startProposalsRegistering().send({ from: accounts[0] });\n\n    let valueEventPreviousStatus = objet.events.WorkflowStatusChange.returnValues.previousStatus;\n    alert(\"The previous status was : \" + valueEventPreviousStatus)\n\n    let valueEventNewStatus = objet.events.WorkflowStatusChange.returnValues.newStatus;\n    alert(\"The new status is : \" + valueEventNewStatus)\n\n    const response2 = await contract.methods.getWorkflowStatus().call();\n    this.setState({ workflowStatus: response2 });\n  }\n\n  handleSubmitProposal = async (e) => {\n    const { accounts, contract, proposal } = this.state;\n    await contract.methods.addProposal(proposal).send({ from: accounts[0] });\n  }\n\n  handleSubmitEndProposalsRegistering = async () => {\n    const { accounts, contract } = this.state;\n    const objet = await contract.methods.endProposalsRegistering().send({ from: accounts[0] });\n    const response3 = await contract.methods.getWorkflowStatus().call();\n    this.setState({ workflowStatus: response3 });\n\n    let valueEventPreviousStatus = objet.events.WorkflowStatusChange.returnValues.previousStatus;\n    alert(\"The previous status was : \" + valueEventPreviousStatus)\n\n    let valueEventNewStatus = objet.events.WorkflowStatusChange.returnValues.newStatus;\n    alert(\"The new status is : \" + valueEventNewStatus)\n  }\n\n  handleSubmitProposalId = async (e) => {\n    const { accounts, contract, proposalId } = this.state;\n    await contract.methods.setVote(parseInt(proposalId)).send({ from: accounts[0] });\n  }\n\n  handleSubmitStartVotingSession = async () => {\n    const { accounts, contract } = this.state;\n    const objet = await contract.methods.startVotingSession().send({ from: accounts[0] });\n    const response4 = await contract.methods.getWorkflowStatus().call();\n    this.setState({ workflowStatus: response4 });\n\n    let valueEventPreviousStatus = objet.events.WorkflowStatusChange.returnValues.previousStatus;\n    alert(\"The previous status was : \" + valueEventPreviousStatus)\n\n    let valueEventNewStatus = objet.events.WorkflowStatusChange.returnValues.newStatus;\n    alert(\"The new status is : \" + valueEventNewStatus)\n  }\n\n  handleSubmitEndVotingSession = async () => {\n    const { accounts, contract } = this.state;\n    const objet = await contract.methods.endVotingSession().send({ from: accounts[0] });\n    const response5 = await contract.methods.getWorkflowStatus().call();\n    this.setState({ workflowStatus: response5 });\n\n    let valueEventPreviousStatus = objet.events.WorkflowStatusChange.returnValues.previousStatus;\n    alert(\"The previous status was : \" + valueEventPreviousStatus)\n\n    let valueEventNewStatus = objet.events.WorkflowStatusChange.returnValues.newStatus;\n    alert(\"The new status is : \" + valueEventNewStatus)\n  }\n  \n  \n  handleSubmitTallyVotes = async () => {\n    const { accounts, contract } = this.state;\n    const objet = await contract.methods.tallyVotes().send({ from: accounts[0] });\n    const response6 = await contract.methods.getWorkflowStatus().call();\n    this.setState({ workflowStatus: response6 });\n    const response = await contract.methods.getWinningProposalId().call();\n    this.setState({ winningProposal: response });\n\n    let valueEventPreviousStatus = objet.events.WorkflowStatusChange.returnValues.previousStatus;\n    alert(\"The previous status was : \" + valueEventPreviousStatus)\n\n    let valueEventNewStatus = objet.events.WorkflowStatusChange.returnValues.newStatus;\n    alert(\"The new status is : \" + valueEventNewStatus)\n}\n\n  handleSubmitGetWinningId = async () => {\n    const { contract } = this.state;\n    const response = await contract.methods.getWinningProposalId().call();\n    this.setState({ winningProposal: response });\n\n  }\n\n  handleSubmitShowproposals = async () => {\n    const { accounts, contract } = this.state;\n    const response = (await contract.methods.getOneProposal(0).call({ from: accounts[0] }));\n    console.log(response);\n    //alert(response[0])\n    this.setState({ proposal0: response[0] });  \n\n    this.setState({showProposals : true});\n\n  }\n  \n  \n  constructor(props) {\n    super(props);\n    this.state = {value: ''};\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmitBis = this.handleSubmitBis.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({value: event.target.value});\n  }\n\n  handleSubmitBis(event) {\n    alert('this.state.winningProposal ' + this.state.winningProposal );\n    event.preventDefault();\n  }\n\n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    if (this.state.owned){\n      if(this.state.showProposals){\n        return (\n          <div className=\"App\">\n    \n            <h1>Application de vote</h1>\n            <div>Adresse connectée : {this.state.accounts}</div><br></br>\n            <div>Etat du vote (workflowStatus) : {this.state.workflowStatus}</div>\n            <p>Owner, inscrivez les voters ici : </p>\n                \n            <form onSubmit={this.handleSubmit}>\n                            <input type=\"text\" id=\"username\" name=\"username\" onChange={this.handleInputChange} required/>             \n                            <button className=\"btn blue darken-2\" type=\"submit\" name=\"action\">Enregister\n                            </button><br></br>\n            </form><br></br>\n                        \n            <button  type=\"button\" onClick={this.handleSubmitStartProposalsRegistering} name=\"startProposalsRegistering\">Commencer l'enregistrement des propositions</button><br></br><br></br>\n                            \n            <form onSubmit={this.handleSubmitProposal}>\n                            <label htmlFor=\"proposal\">Quelle est votre proposition ?</label><br></br>\n                            <input type=\"text\" id=\"proposal\" name=\"proposal\" onChange={this.handleInputChange} required/>\n                            <button className=\"btn blue darken-2\" type=\"submit\" name=\"proposal\">Envoyer</button>\n            </form><br></br>\n    \n            <button  type=\"button\" onClick={this.handleSubmitShowproposals} name=\"showproposals\">Afficher les propositions</button>\n            <center><table>\n              <tr><th>ID de la proposition</th><th>Description de la proposition</th></tr>\n              <tr><td>0</td><td>{this.state.proposal0}</td></tr>\n              <tr><td>1</td><td>{this.state.proposal1}</td></tr>\n              <tr><td>2</td><td>{this.state.proposal2}</td></tr>\n              <tr><td>3</td><td>{this.state.proposal3}</td></tr>\n              <tr><td>4</td><td>{this.state.proposal4}</td></tr>\n            </table></center><br></br>\n\n            <button  type=\"button\" onClick={this.handleSubmitEndProposalsRegistering} name=\"endProposalsRegistering\">Cloturer l'enregistrement des propositions</button><br></br><br></br>\n            <button  type=\"button\" onClick={this.handleSubmitStartVotingSession} name=\"startVotingSession\">Commencer la session de vote</button><br></br><br></br>\n            \n            <form onSubmit={this.handleSubmitProposalId}>\n                            <label htmlFor=\"proposalId\">Votez pour la proposition de votre choix</label><br></br>\n                            <input type=\"text\" id=\"proposalId\" name=\"proposalId\" onChange={this.handleInputChange} required/>\n                            <button className=\"btn blue darken-2\" type=\"submit\" name=\"proposalId\">Envoyer</button>\n            </form><br></br>\n                        \n            <button  type=\"button\" onClick={this.handleSubmitEndVotingSession} name=\"endVotingSession\">Cloturer la session de vote</button><br></br><br></br>\n            <button  type=\"button\" onClick={this.handleSubmitTallyVotes} name=\"tallyVotes\">Compter les voix</button><br></br><br></br>\n            <button  type=\"button\" onClick={this.handleSubmitGetWinningId} name=\"getWinningId\">Afficher l'ID du vainqueur</button><br></br><br></br>\n            \n    \n            <div>winningProposalID : {this.state.winningProposal}</div>\n          </div>\n        );\n      }\n      else{\n        return (\n          <div className=\"App\">\n    \n            <h1>Application de vote</h1>\n            <div>Adresse connectée : {this.state.accounts}</div><br></br>\n            <div>Etat du vote (workflowStatus) : {this.state.workflowStatus}</div>\n            <p>Owner, inscrivez les voters ici : </p>\n                \n            <form onSubmit={this.handleSubmit}>\n                            <input type=\"text\" id=\"username\" name=\"username\" onChange={this.handleInputChange} required/>             \n                            <button className=\"btn blue darken-2\" type=\"submit\" name=\"action\">Enregister\n                            </button><br></br>\n            </form><br></br>\n                        \n            <button  type=\"button\" onClick={this.handleSubmitStartProposalsRegistering} name=\"startProposalsRegistering\">Commencer l'enregistrement des propositions</button><br></br><br></br>\n                            \n            <form onSubmit={this.handleSubmitProposal}>\n                            <label htmlFor=\"proposal\">Quelle est votre proposition ?</label><br></br>\n                            <input type=\"text\" id=\"proposal\" name=\"proposal\" onChange={this.handleInputChange} required/>\n                            <button className=\"btn blue darken-2\" type=\"submit\" name=\"proposal\">Envoyer</button>\n            </form><br></br>\n    \n            <button  type=\"button\" onClick={this.handleSubmitShowproposals} name=\"showproposals\">Afficher les propositions</button><br></br><br></br>\n\n            <button  type=\"button\" onClick={this.handleSubmitEndProposalsRegistering} name=\"endProposalsRegistering\">Cloturer l'enregistrement des propositions</button><br></br><br></br>\n            <button  type=\"button\" onClick={this.handleSubmitStartVotingSession} name=\"startVotingSession\">Commencer la session de vote</button><br></br><br></br>\n            \n            <form onSubmit={this.handleSubmitProposalId}>\n                            <label htmlFor=\"proposalId\">Votez pour l'ID de la proposition de votre choix</label><br></br>\n                            <input type=\"text\" id=\"proposalId\" name=\"proposalId\" onChange={this.handleInputChange} required/>\n                            <button className=\"btn blue darken-2\" type=\"submit\" name=\"proposalId\">Envoyer</button>\n            </form><br></br>\n                        \n            <button  type=\"button\" onClick={this.handleSubmitEndVotingSession} name=\"endVotingSession\">Cloturer la session de vote</button><br></br><br></br>\n            <button  type=\"button\" onClick={this.handleSubmitTallyVotes} name=\"tallyVotes\">Compter les voix</button><br></br><br></br>\n            <button  type=\"button\" onClick={this.handleSubmitGetWinningId} name=\"getWinningId\">Afficher l'ID du vainqueur</button><br></br><br></br>\n            \n    \n            <div>winningProposalID : {this.state.winningProposal}</div>\n          </div>\n        );\n      }\n    }\n\n    else{\n\n      if(this.state.showProposals){ // is this.state.show\n        return (\n          <div className=\"App\">\n    \n            <h1>Application de vote</h1>\n            <div>Adresse connectée : {this.state.accounts}</div><br></br>\n            <div>Etat du vote (workflowStatus) : {this.state.workflowStatus}</div><br></br>\n            \n            <form onSubmit={this.handleSubmitProposal}>\n                            <label htmlFor=\"proposal\">Quelle est votre proposition ?</label><br></br><br></br>\n                            <input type=\"text\" id=\"proposal\" name=\"proposal\" onChange={this.handleInputChange} required/>\n                            <button className=\"btn blue darken-2\" type=\"submit\" name=\"proposal\">Envoyer</button>\n            </form>\n\n            <center><table>\n              <tr><th>ID de la proposition</th><th>Description de la proposition</th></tr>\n              <tr><td>0</td><td>{this.state.proposal0}</td></tr>\n              <tr><td>1</td><td>{this.state.proposal1}</td></tr>\n              <tr><td>2</td><td>{this.state.proposal2}</td></tr>\n              <tr><td>3</td><td>{this.state.proposal3}</td></tr>\n              <tr><td>4</td><td>{this.state.proposal4}</td></tr>\n            </table></center><br></br>\n\n            <form onSubmit={this.handleSubmitProposalId}>\n                            <label htmlFor=\"proposalId\">Votez pour l'ID de la proposition de votre choix</label><br></br>\n                            <input type=\"text\" id=\"proposalId\" name=\"proposalId\" onChange={this.handleInputChange} required/>\n                            <button className=\"btn blue darken-2\" type=\"submit\" name=\"proposalId\">Envoyer</button>\n            </form><br></br>\n                        \n            <button  type=\"button\" onClick={this.handleSubmitGetWinningId} name=\"getWinningId\">Afficher l'ID du vainqueur</button><br></br><br></br>\n            <button  type=\"button\" onClick={this.handleSubmitShowproposals} name=\"showproposals\">Afficher les propositions</button><br></br><br></br>\n    \n            <div>winningProposalID : {this.state.winningProposal}</div>\n          </div>\n        );\n      }\n      else{\n        return (\n          <div className=\"App\">\n    \n            <h1>Application de vote</h1>\n            <div>Adresse connectée : {this.state.accounts}</div><br></br>\n            <div>Etat du vote (workflowStatus) : {this.state.workflowStatus}</div><br></br>\n            \n            <form onSubmit={this.handleSubmitProposal}>\n                            <label htmlFor=\"proposal\">Quelle est votre proposition ?</label><br></br>\n                            <input type=\"text\" id=\"proposal\" name=\"proposal\" onChange={this.handleInputChange} required/>\n                            <button className=\"btn blue darken-2\" type=\"submit\" name=\"proposal\">Envoyer</button>\n            </form><br></br>\n     \n            <button  type=\"button\" onClick={this.handleSubmitShowproposals} name=\"showproposals\">Afficher les propositions</button><br></br><br></br>\n\n            <form onSubmit={this.handleSubmitProposalId}>\n                            <label htmlFor=\"proposalId\">Votez pour l'ID de la proposition de votre choix</label><br></br>\n                            <input type=\"text\" id=\"proposalId\" name=\"proposalId\" onChange={this.handleInputChange} required/>\n                            <button className=\"btn blue darken-2\" type=\"submit\" name=\"proposalId\">Envoyer</button>\n            </form><br></br>\n                        \n            <button  type=\"button\" onClick={this.handleSubmitGetWinningId} name=\"getWinningId\">Afficher l'ID du vainqueur</button><br></br><br></br>\n            \n            <div>winningProposalID : {this.state.winningProposal}</div>\n          </div>\n        );\n      }\n    }\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}